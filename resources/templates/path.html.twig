{% extends 'layout.html.twig' %}
{% import 'macros.twig' as macros %}

{% block content %}
    <script>
    var graph = function(classname, method, padding) {
        var g = new dagreD3.graphlib.Graph()
                .setGraph({})
                .setDefaultEdgeLabel(function() { return {}; });

        padding = padding || 10;

        g.addBranch = function(branch) {
            var opLabel = 'OP #' + branch.op_start,
                lineLabel = 'Line #' + branch.line_start;

            if (branch.op_start != branch.op_end) {
                opLabel = opLabel + ' - #' + branch.op_end;
            }

            if (branch.line_start != branch.line_end) {
                lineLabel = lineLabel + ' - #' + branch.line_end;
            }

            g.setNode(
                    branch.op_start,
                    {
                        label: opLabel + '\n \n' + lineLabel,
                        class: branch.hit ? 'covered' : 'uncovered'
                    }
            );

            return g;
        };

        var edges = [];
        g.addEdge = function(begin, end, hit, label) {
            var options = {
                lineInterpolate: 'basis'
            };

            if (!edges[begin]) {
                edges[begin] = [];
            }

            if (!edges[begin][end]) {
                edges[begin][end] = {};
                edges[begin][end][true] = 0;
                edges[begin][end][false] = 0;
            }

            ++edges[begin][end][!!hit];

            if (label) {
                options.label = label;
                options.width = padding / 2;
            }

            var paths = edges[begin][end][true] + edges[begin][end][false];
            if (paths > 1) {
                options.label = ' ' + edges[begin][end][true] + ' / ' + paths;
            }

            options.labelStyle = 'fill: #' + (edges[begin][end][true] == paths ? '8eff9b' : 'ff8c76');
            options.class = edges[begin][end][true] == paths ? 'covered' : 'uncovered';

            g.setEdge(begin, end, options);

            return g;
        };

        g.roundNodes = function() {
            g.nodes().forEach(function(v) {
                var node = g.node(v);

                node.rx = node.ry = 5;
            });

            return g;
        };

        g.render = function() {
            var render = new dagreD3.render(),
                    svg = d3.select('#' + method + ' svg'),
                    group = svg.append("g");

            render(d3.select('#' + method + ' svg g'), g);

            group.attr("transform", 'translate(' + padding + ', ' + padding + ')');
            svg
                .attr("height", g.graph().height + (padding * 2))
                .attr("width", g.graph().width + (padding * 2));
        };

        return g;
    };
    </script>

    <div class="row">
        <h1 class="pull-left">{{ class }}: paths coverage</h1>
        <h2 class="pull-right"><span class="text-{{ macros.color(data.coverage.paths) }}">{{ data.coverage.paths|round(2) * 100 }}%</span></h2
    </div>

    {% include 'methods.html.twig' %}

    {% for methodname, methoddata in data.methods %}
        <div class="panel panel-{{ macros.color(methoddata.coverage.paths) }}" id="{{ methodname }}">
            <div class="panel-heading">
                {{ class }}::{{ methodname }}()
                {{ macros.labelify(methoddata.coverage.paths) }}
                {{ macros.navigation(class, methodname, methoddata.coverage, 'paths') }}
            </div>
            <div class="panel-body">
                <div class="graph"><svg></svg></div>
            </div>
        </div>

        <script>
            var g = graph('{{ class|replace({'\\': '\\\\'}) }}', '{{ methodname }}');

            {% for branch in methoddata.branches %}
                g.addBranch({% autoescape false %}{{ branch|json_encode }}{% endautoescape %});
            {% endfor %}
            g.roundNodes();
            {% for pathindex, path in methoddata.paths %}
                {% for index, begin in path.path %}
                    {% set next = path.path[index + 1] is defined ? path.path[index + 1] : null %}

                    {% if next %}
                        g.addEdge({{ begin }}, {{ next }}, {{ path.hit }});
                    {% endif %}
                {% endfor %}
            {% endfor %}
            g.render();
        </script>
    {% endfor %}
{% endblock %}
